{"version":3,"file":"static/js/752.ed4f6789.chunk.js","mappings":"6NACA,EAAuB,wBAAvB,EAA6D,+BAA7D,EAA0G,+BAA1G,EAA0J,kCAA1J,EAAkM,uBAAlM,EAAkO,0BAAlO,EAA0Q,+B,2DCUpQA,EAAoB,CACxBC,MAAO,GACPC,SAAU,IA2FZ,EAxFkB,WAChB,OAAwCC,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACJP,GACFG,EAAS,QAAS,CAAEK,SAAS,GAEhC,GAAE,CAACR,EAASG,IAEb,IAAMM,EAAY,mCAAG,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,UAAjB,SACbN,GAASO,EAAAA,EAAAA,OAAMF,IADF,OAEnBC,IAFmB,2CAAH,wDAKZE,EAAuB,WAC3Bd,GAAgB,SAAAe,GAAgB,OAAKA,CAAL,GACjC,EAED,OACE,SAAC,KAAD,CACEC,cAAerB,EACfsB,SAAUP,EACVQ,iBAAkBC,EAAAA,EAClBC,gBAAc,EAJhB,SAMG,gBACCT,EADD,EACCA,OACAU,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WALD,EAMCd,aAND,EAOCe,QAPD,EAQCC,MARD,OAUC,UAAC,KAAD,CAAMC,UAAWC,EAAjB,WACE,iBAAKD,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEC,aAAa,QACbC,YAAY,mBACZC,KAAK,QACLC,KAAK,QACLC,SAAUV,EACVW,OAAQV,EACRb,OAAQA,EAAOf,MACf+B,UAAWC,IAEZN,EAAQ1B,OAASyB,EAAOzB,QACvB,cAAG+B,UAAWC,EAAd,SAAgCP,EAAOzB,YAI3C,iBAAK+B,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEE,YAAY,sBACZC,KAAOhC,EAA4B,OAAb,WACtBiC,KAAK,WACLC,SAAUV,EACVW,OAAQV,EACRb,OAAQA,EAAOd,SACf8B,UAAWC,IAEZN,EAAQzB,UAAYwB,EAAOxB,WAC1B,cAAG8B,UAAWC,EAAd,SAAgCP,EAAOxB,YAEzC,gBACEsC,MAAO,GACPC,OAAQ,GACRT,UAAWC,EACXS,QAASvB,EAJX,UAME,gBAAKwB,KAAMC,EAAAA,EAAY,oBAI3B,mBAAQR,KAAK,SAASJ,UAAWC,EAAjC,SAA6C,iBAlDhD,GAyDN,C,8ECtGD,MAA2BY,EAAQ,MAA3BC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,OAEHC,EAAqBF,EAAO,CACvCT,KAAMU,IACHE,OACAC,QACC,gDACA,6BAEDC,IAAI,EAAG,2MACPC,IAAI,GAAI,+CACRC,SAAS,oBACZpD,MAAO8C,IACJE,OACAC,QACC,oDACA,4BAEDjD,MAAM,4BACNoD,SAAS,qBACZnD,SAAU6C,IACPE,OACAC,QACC,8DACA,+BAEDC,IAAI,EAAG,mDACPC,IAAI,GAAI,uDACRC,SAAS,0B,UC1BD7B,GAAcsB,EAAAA,EAAAA,QAAO,CAChC7C,OAAO8C,EAAAA,EAAAA,UACJE,OACAC,QACC,oDACA,4BAEDjD,MAAM,4BACNoD,SAAS,qBACZnD,UAAU6C,EAAAA,EAAAA,UACPE,OACAC,QACC,8DACA,+BAEDC,IAAI,EAAG,mDACPC,IAAI,GAAI,uDACRC,SAAS,yB","sources":["webpack://taskpro/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx","utils/validation/registrationSchema.js","utils/validation/loginSchema.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"form__field\":\"LoginForm_form__field__Xf4zy\",\"form__input\":\"LoginForm_form__input__09r8K\",\"form__password\":\"LoginForm_form__password__4yKCt\",\"svg\":\"LoginForm_svg__uWKIN\",\"button\":\"LoginForm_button__LodJg\",\"form__error\":\"LoginForm_form__error__pGr5k\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { login } from '../../store/user/operationAuth';\nimport css from './LoginForm.module.css';\nimport { getIsLogin } from 'store/user/selectorsAuth';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport svgSprite from '../../assets/svg/symbol-defs.svg';\nimport { loginSchema } from 'utils/validation';\n\nconst initialValuesForm = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const isLogIn = useSelector(getIsLogin);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isLogIn) {\n      navigate('/home', { replace: true });\n    }\n  }, [isLogIn, navigate]);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    await dispatch(login(values));\n    resetForm();\n  };\n\n  const handleTogglePassword = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  return (\n    <Formik\n      initialValues={initialValuesForm}\n      onSubmit={handleSubmit}\n      validationSchema={loginSchema}\n      validateOnBlur\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isValid,\n        dirty,\n      }) => (\n        <Form className={css.form}>\n          <div className={css.form__field}>\n            <Field\n              autoComplete=\"email\"\n              placeholder=\"Enter your email\"\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.email}\n              className={css.form__input}\n            />\n            {touched.email && errors.email && (\n              <p className={css.form__error}>{errors.email}</p>\n            )}\n          </div>\n\n          <div className={css.form__password}>\n            <Field\n              placeholder=\"Enter your password\"\n              type={!showPassword ? 'password' : 'text'}\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.password}\n              className={css.form__input}\n            />\n            {touched.password && errors.password && (\n              <p className={css.form__error}>{errors.password}</p>\n            )}\n            <svg\n              width={18}\n              height={18}\n              className={css.svg}\n              onClick={handleTogglePassword}\n            >\n              <use href={svgSprite + '#icon-eye'} />\n            </svg>\n          </div>\n\n          <button type=\"submit\" className={css.button}>\n            Log In Now\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n","const { object, string } = require('yup');\n\nexport const registrationSchema = object({\n  name: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+[\\]{};':\",.<>?/~\\\\-]+$/,\n      'Please enter a valid name'\n    )\n    .min(2, \"Ім'я повинно містити щонайменше 2 знаки\")\n    .max(32, 'The name must contain at least 2 characters')\n    .required('Name is required'),\n  email: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n      'Enter your email correct'\n    )\n    .email('Enter your email correct')\n    .required('Email is required'),\n  password: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%№^&*)(_+-=[{}|`\"'”;:,./<>?£]+$/,\n      'Enter your password correct'\n    )\n    .min(8, 'The password must be at least 8 characters long')\n    .max(64, 'The password can contain a maximum of 64 characters')\n    .required('Password is required'),\n});\n","import { object, string } from 'yup';\n\nexport const loginSchema = object({\n  email: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n      'Enter your email correct'\n    )\n    .email('Enter your email correct')\n    .required('Email is required'),\n  password: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%№^&*)(_+-=[{}|`\"'”;:,./<>?£]+$/,\n      'Enter your password correct'\n    )\n    .min(8, 'The password must be at least 8 characters long')\n    .max(64, 'The password can contain a maximum of 64 characters')\n    .required('Password is required'),\n});\n"],"names":["initialValuesForm","email","password","useState","showPassword","setShowPassword","isLogIn","useSelector","getIsLogin","navigate","useNavigate","dispatch","useDispatch","useEffect","replace","handleSubmit","values","resetForm","login","handleTogglePassword","prevShowPassword","initialValues","onSubmit","validationSchema","loginSchema","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","dirty","className","css","autoComplete","placeholder","type","name","onChange","onBlur","width","height","onClick","href","svgSprite","require","object","string","registrationSchema","trim","matches","min","max","required"],"sourceRoot":""}