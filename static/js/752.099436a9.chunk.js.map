{"version":3,"file":"static/js/752.099436a9.chunk.js","mappings":"uOACA,EAAuB,wBAAvB,EAA6D,+BAA7D,EAA0G,+BAA1G,EAA0J,kCAA1J,EAAkM,uBAAlM,EAAkO,0BAAlO,EAA0Q,+B,iDCUpQA,GAASC,EAAAA,EAAAA,IAAO,CACpBC,OAAOC,EAAAA,EAAAA,MAASC,OAAOF,MAAM,4BAA4BG,SAAS,YAClEC,UAAUH,EAAAA,EAAAA,MACPC,OACAG,QAAQ,8DAAkD,+BAC1DC,IAAI,GACJC,IAAI,IACJJ,SAAS,cAGRK,EAAoB,CACxBR,MAAO,GACPI,SAAU,IA4FZ,EAzFkB,WAChB,OAAwCK,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,IACtBC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACJP,GACFG,EAAS,QAAS,CAAEK,SAAS,GAEhC,GAAE,CAACR,EAASG,IAEb,IAAMM,EAAY,mCAAG,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,UACpCC,QAAQC,IAAIH,GADO,SAEbL,GAASS,EAAAA,EAAAA,OAAMJ,IAFF,OAGnBC,IAHmB,2CAAH,wDAMZI,EAAuB,WAC3BhB,GAAgB,SAAAiB,GAAgB,OAAKA,CAAL,GACjC,EAED,OACE,SAAC,KAAD,CACEC,cAAerB,EACfsB,SAAUT,EACVU,iBAAkBjC,EAClBkC,gBAAc,EAJhB,SAMG,gBACCV,EADD,EACCA,OACAW,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WALD,EAMCf,aAND,EAOCgB,QAPD,EAQCC,MARD,OAUC,UAAC,KAAD,CAAMC,UAAWC,EAAjB,WACE,iBAAKD,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEC,aAAa,QACbC,YAAY,mBACZC,KAAK,QACLC,KAAK,QACLC,SAAUV,EACVW,OAAQV,EACRd,OAAQA,EAAOtB,MACfuC,UAAWC,IAEZN,EAAQlC,OAASiC,EAAOjC,QACvB,cAAGuC,UAAWC,EAAd,SAAgCP,EAAOjC,YAI3C,iBAAKuC,UAAWC,EAAhB,WACE,SAAC,KAAD,CACEE,YAAY,sBACZC,KAAOjC,EAA4B,OAAb,WACtBkC,KAAK,WACLC,SAAUV,EACVW,OAAQV,EACRd,OAAQA,EAAOlB,SACfmC,UAAWC,IAEZN,EAAQ9B,UAAY6B,EAAO7B,WAC1B,cAAGmC,UAAWC,EAAd,SAAgCP,EAAO7B,YAEzC,gBACE2C,MAAO,GACPC,OAAQ,GACRT,UAAWC,EACXS,QAAStB,EAJX,UAME,gBAAKuB,KAAMC,EAAAA,EAAY,oBAI3B,mBAAQR,KAAK,SAASJ,UAAWC,EAAjC,0BAlDH,GAyDN,C","sources":["webpack://taskpro/./src/components/LoginForm/LoginForm.module.css?4ac5","components/LoginForm/LoginForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"LoginForm_form__gPEx5\",\"form__field\":\"LoginForm_form__field__Xf4zy\",\"form__input\":\"LoginForm_form__input__09r8K\",\"form__password\":\"LoginForm_form__password__4yKCt\",\"svg\":\"LoginForm_svg__uWKIN\",\"button\":\"LoginForm_button__LodJg\",\"form__error\":\"LoginForm_form__error__pGr5k\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { login } from '../../store/user/operationAuth';\nimport { object, string } from 'yup';\nimport css from './LoginForm.module.css';\nimport { getIsLoggin } from 'store/user/selectorsAuth';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\nimport svgSprite from '../../assets/svg/symbol-defs.svg';\n\nconst schema = object({\n  email: string().trim().email('Enter your email correct').required('Required'),\n  password: string()\n    .trim()\n    .matches(/^[a-zA-Z0-9!@#$%№^&*)(_+-=[{}|`\"'”;:,./<>?£]+$/, 'Enter your password correct')\n    .min(8)\n    .max(64)\n    .required('Required'),\n});\n\nconst initialValuesForm = {\n  email: '',\n  password: '',\n};\n\nconst LoginForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const isLogIn = useSelector(getIsLoggin);\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isLogIn) {\n      navigate('/home', { replace: true });\n    }\n  }, [isLogIn, navigate]);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    console.log(values);\n    await dispatch(login(values));\n    resetForm();\n  };\n\n  const handleTogglePassword = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  return (\n    <Formik\n      initialValues={initialValuesForm}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n      validateOnBlur\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isValid,\n        dirty,\n      }) => (\n        <Form className={css.form}>\n          <div className={css.form__field}>\n            <Field\n              autoComplete=\"email\"\n              placeholder=\"Enter your email\"\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.email}\n              className={css.form__input}\n            />\n            {touched.email && errors.email && (\n              <p className={css.form__error}>{errors.email}</p>\n            )}\n          </div>\n\n          <div className={css.form__password}>\n            <Field\n              placeholder=\"Enter your password\"\n              type={!showPassword ? 'password' : 'text'}\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.password}\n              className={css.form__input}\n            />\n            {touched.password && errors.password && (\n              <p className={css.form__error}>{errors.password}</p>\n            )}\n            <svg\n              width={18}\n              height={18}\n              className={css.svg}\n              onClick={handleTogglePassword}\n            >\n              <use href={svgSprite + '#icon-eye'} />\n            </svg>\n          </div>\n\n          <button type=\"submit\" className={css.button}>\n            Log In Now\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default LoginForm;\n"],"names":["schema","object","email","string","trim","required","password","matches","min","max","initialValuesForm","useState","showPassword","setShowPassword","isLogIn","useSelector","getIsLoggin","navigate","useNavigate","dispatch","useDispatch","useEffect","replace","handleSubmit","values","resetForm","console","log","login","handleTogglePassword","prevShowPassword","initialValues","onSubmit","validationSchema","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","dirty","className","css","autoComplete","placeholder","type","name","onChange","onBlur","width","height","onClick","href","svgSprite"],"sourceRoot":""}