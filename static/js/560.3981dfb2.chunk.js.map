{"version":3,"file":"static/js/560.3981dfb2.chunk.js","mappings":"4KACA,EAA4B,2BAA5B,EAAiE,yBAAjE,EAAkG,uBAAlG,EAAmI,yB,UCAnI,EAA4B,+BAA5B,EAAyE,iCAAzE,EAAoH,6BAApH,EAAyJ,2B,SCC5IA,EAAc,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAC/BC,EAAuBF,EAAUG,EAAcA,EACrD,OACE,gBAAKC,UAAWD,EAAhB,UACE,gBACEC,UAAS,UAAKD,EAAL,YAAwBD,GACjCG,MAAO,CAAEC,MAAM,GAAD,OAAKL,EAAL,SAIrB,E,UCPYM,EAAU,SAAC,GAAoD,IAAD,IAAjDP,QAAAA,OAAiD,SAAhCQ,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YACvD,GAAgCC,EAAAA,EAAAA,UAAS,GAAzC,eAAOT,EAAP,KAAiBU,EAAjB,KAEMC,EAAOZ,EAAU,2BAA6B,qBAC9Ca,EAAeb,EAAUG,EAAcA,EAsB7C,OApBAW,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAQC,aAAY,WACxBL,GAAY,SAAAM,GAAY,OAAIA,EAAe,IAAM,EAAzB,GACzB,GAAE,IAEH,OAAO,WACLC,cAAcH,EACf,CACF,GAAE,KAEHD,EAAAA,EAAAA,YAAU,WACRH,EAAY,EACb,GAAE,CAACF,KAEJK,EAAAA,EAAAA,YAAU,WACJb,GAAY,KACdO,GAEH,GAAE,CAACP,EAAUO,KAGZ,+BACE,iBAAKJ,UAAWD,EAAhB,WACE,gBAAKG,MAAO,GAAIa,OAAQ,GAAxB,UACE,gBAAKf,UAAWS,EAAcO,KAAMC,EAAAA,EAAYT,OAElD,cAAGR,UAAWD,EAAd,SAA4BM,KAC5B,SAACV,EAAD,CAAaC,QAASA,EAASC,SAAUA,QAIhD,E,wCCzCD,EAA4B,+BAA5B,EAA6E,qCAA7E,EAAyH,0BAAzH,EAA4J,oDCO/IqB,EAAc,WACzB,OAA0CZ,EAAAA,EAAAA,WAAS,GAAnD,eAAOa,EAAP,KAAsBC,EAAtB,KACMC,GAAQC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBC,GAAYF,EAAAA,EAAAA,IAAYG,EAAAA,KAE9Bf,EAAAA,EAAAA,YAAU,WACJW,GACFD,GAAiB,EAEpB,GAAE,CAACC,IAMJ,OACE,iBAAKrB,UAAWD,EAAhB,WACE,iBAAKC,UAAWD,EAAhB,WACE,SAAC,KAAD,CACEC,UAAW,YACT,OAD2B,EAAf0B,SACM3B,EAAaA,CAChC,EACD4B,GAAG,WAJL,SAKC,kBAGD,SAAC,KAAD,CACE3B,UAAW,YACT,OAD2B,EAAf0B,SACM3B,EAAaA,CAChC,EACD4B,GAAG,QAJL,SAKC,eAIH,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACC,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,MAEDX,IAAkBK,IACjB,SAACrB,EAAD,CAASC,aA5BM,WACnBgB,GAAiB,EAClB,EA0B0Cf,YAAagB,MAIzD,E,UCxCD,EARa,WACX,OACE,SAACU,EAAA,EAAD,WACE,SAACb,EAAD,KAGL,C","sources":["webpack://taskpro/./src/components/Message/Message.module.css?e83e","webpack://taskpro/./src/components/ProgressBar/ProgressBar.module.css?d7bc","components/ProgressBar/ProgressBar.jsx","components/Message/Message.jsx","webpack://taskpro/./src/components/AuthSection/AuthSection.module.css?5c5a","components/AuthSection/AuthSection.jsx","page/Auth/Auth.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Message_container__zJCe+\",\"success\":\"Message_success__9q2cu\",\"error\":\"Message_error__WMKav\",\"message\":\"Message_message__fh13J\"};","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"ProgressBar_container__bkBCr\",\"progressBar\":\"ProgressBar_progressBar__5X2M7\",\"success\":\"ProgressBar_success__KXSxX\",\"error\":\"ProgressBar_error__8a+Bt\"};","import css from './ProgressBar.module.css';\n\nexport const ProgressBar = ({ success, progress }) => {\n  const progressBarClassName = success ? css.success : css.error;\n  return (\n    <div className={css.container}>\n      <div\n        className={`${css.progressBar} ${progressBarClassName}`}\n        style={{ width: `${progress}%` }}\n      ></div>\n    </div>\n  );\n};\n","import css from './Message.module.css';\nimport svgSprite from '../../assets/svg/symbol-defs.svg';\nimport { ProgressBar } from 'components/ProgressBar';\nimport { useEffect, useState } from 'react';\n\nexport const Message = ({ success = false, closeMessage, textMessage }) => {\n  const [progress, setProgress] = useState(0);\n\n  const icon = success ? '#icon-checkedmark_114531' : '#icon-cancel-close';\n  const svgClassName = success ? css.success : css.error;\n\n  useEffect(() => {\n    const timer = setInterval(() => {\n      setProgress(prevProgress => prevProgress + 100 / 60);\n    }, 50);\n\n    return () => {\n      clearInterval(timer);\n    };\n  }, []);\n\n  useEffect(() => {\n    setProgress(0);\n  }, [textMessage]);\n\n  useEffect(() => {\n    if (progress >= 100) {\n      closeMessage();\n    }\n  }, [progress, closeMessage]);\n\n  return (\n    <>\n      <div className={css.container}>\n        <svg width={30} height={30}>\n          <use className={svgClassName} href={svgSprite + icon} />\n        </svg>\n        <p className={css.message}>{textMessage}</p>\n        <ProgressBar success={success} progress={progress} />\n      </div>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"AuthSection_container__Hgvqv\",\"link__container\":\"AuthSection_link__container__LvHOA\",\"link\":\"AuthSection_link__nxSyw\",\"active\":\"AuthSection_active__VCeL2 AuthSection_link__nxSyw\"};","import { Loader } from 'components/Loader';\nimport { Message } from 'components/Message';\nimport { Suspense, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { NavLink, Outlet } from 'react-router-dom';\nimport { getError, getIsLoading } from 'store/user/selectorsAuth';\nimport css from './AuthSection.module.css';\n\nexport const AuthSection = () => {\n  const [isMessageOpen, setIsMessageOpen] = useState(false);\n  const error = useSelector(getError);\n  const isLoading = useSelector(getIsLoading);\n\n  useEffect(() => {\n    if (error) {\n      setIsMessageOpen(true);\n    }\n  }, [error]);\n\n  const closeMessage = () => {\n    setIsMessageOpen(false);\n  };\n\n  return (\n    <div className={css.container}>\n      <div className={css.link__container}>\n        <NavLink\n          className={({ isActive }) => {\n            return isActive ? css.active : css.link;\n          }}\n          to=\"register\"\n        >\n          Registration\n        </NavLink>\n        <NavLink\n          className={({ isActive }) => {\n            return isActive ? css.active : css.link;\n          }}\n          to=\"login\"\n        >\n          Log In\n        </NavLink>\n      </div>\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n      {isMessageOpen && !isLoading && (\n        <Message closeMessage={closeMessage} textMessage={error} />\n      )}\n    </div>\n  );\n};\n","import { AuthSection } from 'components/AuthSection/AuthSection';\nimport { StartContainer } from 'components/StartContainer/StartContainer';\n\nconst Auth = () => {\n  return (\n    <StartContainer>\n      <AuthSection />\n    </StartContainer>\n  );\n};\n\nexport default Auth;\n"],"names":["ProgressBar","success","progress","progressBarClassName","css","className","style","width","Message","closeMessage","textMessage","useState","setProgress","icon","svgClassName","useEffect","timer","setInterval","prevProgress","clearInterval","height","href","svgSprite","AuthSection","isMessageOpen","setIsMessageOpen","error","useSelector","getError","isLoading","getIsLoading","isActive","to","Suspense","fallback","Loader","StartContainer"],"sourceRoot":""}