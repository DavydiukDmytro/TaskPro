{"version":3,"file":"static/js/47.b36a4f3b.chunk.js","mappings":"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","sources":["webpack://taskpro/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegistrationForm.jsx","utils/validation/registrationSchema.js","utils/validation/loginSchema.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form__field\":\"RegisterForm_form__field__jpPyI\",\"form__input\":\"RegisterForm_form__input__9aHOm\",\"form__password\":\"RegisterForm_form__password__+UpFm\",\"svg\":\"RegisterForm_svg__eGjZe\",\"button\":\"RegisterForm_button__B3hFq\",\"form__error\":\"RegisterForm_form__error__s02Vz\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { register } from '../../store/user/operationAuth';\nimport css from './RegisterForm.module.css';\nimport { getIsLogin } from 'store/user/selectorsAuth';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport svgSprite from '../../assets/svg/symbol-defs.svg';\nimport { registrationSchema } from 'utils/validation';\n\nconst initialValuesForm = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegistrationForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const isLogIn = useSelector(getIsLogin);\n\n  useEffect(() => {\n    if (isLogIn) {\n      navigate('/home', { replace: true });\n    }\n  }, [isLogIn, navigate]);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    console.log(values);\n    await dispatch(register(values));\n    resetForm();\n  };\n\n  const handleTogglePassword = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  return (\n    <Formik\n      initialValues={initialValuesForm}\n      onSubmit={handleSubmit}\n      validationSchema={registrationSchema}\n      validateOnBlur\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isValid,\n        dirty,\n      }) => (\n        <Form className={css.form}>\n          <div className={css.form__field}>\n            <Field\n              autoComplete=\"name\"\n              placeholder=\"Enter your name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.name}\n              className={css.form__input}\n            />\n            {touched.name && errors.name && (\n              <p className={css.form__error}>{errors.name}</p>\n            )}\n          </div>\n\n          <div className={css.form__field}>\n            <Field\n              autoComplete=\"email\"\n              placeholder=\"Enter your email\"\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.email}\n              className={css.form__input}\n            />\n            {touched.email && errors.email && (\n              <p className={css.form__error}>{errors.email}</p>\n            )}\n          </div>\n\n          <div className={css.form__password}>\n            <Field\n              autoComplete=\"password\"\n              placeholder=\"Enter your password\"\n              type={!showPassword ? 'password' : 'text'}\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.password}\n              className={css.form__input}\n            />\n            {touched.password && errors.password && (\n              <p className={css.form__error}>{errors.password}</p>\n            )}\n            <svg\n              width={18}\n              height={18}\n              className={css.svg}\n              onClick={handleTogglePassword}\n            >\n              <use href={svgSprite + '#icon-eye'} />\n            </svg>\n          </div>\n\n          <button type=\"submit\" className={css.button}>\n            Register Now\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegistrationForm;\n","const { object, string } = require('yup');\n\nexport const registrationSchema = object({\n  name: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%^&*()_+[\\]{};':\",.<>?/~\\\\-]+$/,\n      'Please enter a valid name'\n    )\n    .min(2, \"Ім'я повинно містити щонайменше 2 знаки\")\n    .max(32, 'The name must contain at least 2 characters')\n    .required('Name is required'),\n  email: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n      'Enter your email correct'\n    )\n    .email('Enter your email correct')\n    .required('Email is required'),\n  password: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%№^&*)(_+-=[{}|`\"'”;:,./<>?£]+$/,\n      'Enter your password correct'\n    )\n    .min(8, 'The password must be at least 8 characters long')\n    .max(64, 'The password can contain a maximum of 64 characters')\n    .required('Password is required'),\n});\n","import { object, string } from 'yup';\n\nexport const loginSchema = object({\n  email: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,4}$/,\n      'Enter your email correct'\n    )\n    .email('Enter your email correct')\n    .required('Email is required'),\n  password: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9!@#$%№^&*)(_+-=[{}|`\"'”;:,./<>?£]+$/,\n      'Enter your password correct'\n    )\n    .min(8, 'The password must be at least 8 characters long')\n    .max(64, 'The password can contain a maximum of 64 characters')\n    .required('Password is required'),\n});\n"],"names":["initialValuesForm","name","email","password","useState","showPassword","setShowPassword","navigate","useNavigate","dispatch","useDispatch","isLogIn","useSelector","getIsLogin","useEffect","replace","handleSubmit","values","resetForm","console","log","register","handleTogglePassword","prevShowPassword","initialValues","onSubmit","validationSchema","registrationSchema","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","dirty","className","css","autoComplete","placeholder","type","onChange","onBlur","width","height","onClick","href","svgSprite","require","object","string","trim","matches","min","max","required","loginSchema"],"sourceRoot":""}