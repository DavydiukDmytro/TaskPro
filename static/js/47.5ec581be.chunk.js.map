{"version":3,"file":"static/js/47.5ec581be.chunk.js","mappings":"sOACA,GAAgB,YAAc,kCAAkC,YAAc,kCAAkC,eAAiB,qCAAqC,IAAM,0BAA0B,OAAS,6BAA6B,YAAc,mC,iDCSpPA,GAASC,EAAAA,EAAAA,IAAO,CACpBC,MAAMC,EAAAA,EAAAA,MACHC,OACAC,QACC,kEACA,2BAEDC,IAAI,GACJC,IAAI,IACJC,SAAS,YACZC,OAAON,EAAAA,EAAAA,MAASC,OAAOK,MAAM,4BAA4BD,SAAS,YAClEE,UAAUP,EAAAA,EAAAA,MACPC,OACAC,QAAQ,8DAAkD,+BAC1DC,IAAI,GACJC,IAAI,IACJC,SAAS,cAGRG,EAAoB,CACxBT,KAAM,GACNO,MAAO,GACPC,SAAU,IA6GZ,EA1GyB,WACvB,OAAwCE,EAAAA,EAAAA,WAAS,GAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAUC,EAAAA,EAAAA,IAAYC,EAAAA,KAE5BC,EAAAA,EAAAA,YAAU,WACJH,GACFJ,EAAS,QAAS,CAAEQ,SAAS,GAEhC,GAAE,CAACJ,EAASJ,IAEb,IAAMS,EAAY,mCAAG,WAAOC,EAAP,iFAAiBC,EAAjB,EAAiBA,UACpCC,QAAQC,IAAIH,GADO,SAEbR,GAASY,EAAAA,EAAAA,UAASJ,IAFL,OAGnBC,IAHmB,2CAAH,wDAMZI,EAAuB,WAC3BhB,GAAgB,SAAAiB,GAAgB,OAAKA,CAAL,GACjC,EAED,OACE,SAAC,KAAD,CACEC,cAAerB,EACfsB,SAAUT,EACVU,iBAAkBlC,EAClBmC,gBAAc,EAJhB,SAMG,gBACCV,EADD,EACCA,OACAW,EAFD,EAECA,OACAC,EAHD,EAGCA,QACAC,EAJD,EAICA,aACAC,EALD,EAKCA,WALD,EAMCf,aAND,EAOCgB,QAPD,EAQCC,MARD,OAUC,UAAC,KAAD,CAAMC,UAAWC,EAAAA,KAAjB,WACE,iBAAKD,UAAWC,EAAAA,YAAhB,WACE,SAAC,KAAD,CACEC,aAAa,OACbC,YAAY,kBACZC,KAAK,OACL5C,KAAK,OACL6C,SAAUT,EACVU,OAAQT,EACRd,OAAQA,EAAOvB,KACfwC,UAAWC,EAAAA,cAEZN,EAAQnC,MAAQkC,EAAOlC,OACtB,cAAGwC,UAAWC,EAAAA,YAAd,SAAgCP,EAAOlC,WAI3C,iBAAKwC,UAAWC,EAAAA,YAAhB,WACE,SAAC,KAAD,CACEC,aAAa,QACbC,YAAY,mBACZC,KAAK,QACL5C,KAAK,QACL6C,SAAUT,EACVU,OAAQT,EACRd,OAAQA,EAAOhB,MACfiC,UAAWC,EAAAA,cAEZN,EAAQ5B,OAAS2B,EAAO3B,QACvB,cAAGiC,UAAWC,EAAAA,YAAd,SAAgCP,EAAO3B,YAI3C,iBAAKiC,UAAWC,EAAAA,eAAhB,WACE,SAAC,KAAD,CACEC,aAAa,WACbC,YAAY,sBACZC,KAAOjC,EAA4B,OAAb,WACtBX,KAAK,WACL6C,SAAUT,EACVU,OAAQT,EACRd,OAAQA,EAAOf,SACfgC,UAAWC,EAAAA,cAEZN,EAAQ3B,UAAY0B,EAAO1B,WAC1B,cAAGgC,UAAWC,EAAAA,YAAd,SAAgCP,EAAO1B,YAEzC,gBACEuC,MAAO,GACPC,OAAQ,GACRR,UAAWC,EAAAA,IACXQ,QAASrB,EAJX,UAME,gBAAKsB,KAAMC,EAAAA,EAAY,oBAI3B,mBAAQP,KAAK,SAASJ,UAAWC,EAAAA,OAAjC,4BAnEH,GA0EN,C","sources":["webpack://taskpro/./src/components/RegisterForm/RegisterForm.module.css?a5d4","components/RegisterForm/RegistrationForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form__field\":\"RegisterForm_form__field__jpPyI\",\"form__input\":\"RegisterForm_form__input__9aHOm\",\"form__password\":\"RegisterForm_form__password__+UpFm\",\"svg\":\"RegisterForm_svg__eGjZe\",\"button\":\"RegisterForm_button__B3hFq\",\"form__error\":\"RegisterForm_form__error__s02Vz\"};","import { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Form, Field } from 'formik';\nimport { object, string } from 'yup';\nimport { register } from '../../store/user/operationAuth';\nimport css from './RegisterForm.module.css';\nimport { getIsLoggin } from 'store/user/selectorsAuth';\nimport { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport svgSprite from '../../assets/svg/symbol-defs.svg';\n\nconst schema = object({\n  name: string()\n    .trim()\n    .matches(\n      /^[a-zA-Z0-9_\\s~!@#$%№^&*()_+-=[{}|`\"'”;:,./<>?£]+$/,\n      'Enter your name correct'\n    )\n    .min(2)\n    .max(16)\n    .required('Required'),\n  email: string().trim().email('Enter your email correct').required('Required'),\n  password: string()\n    .trim()\n    .matches(/^[a-zA-Z0-9!@#$%№^&*)(_+-=[{}|`\"'”;:,./<>?£]+$/, 'Enter your password correct')\n    .min(8)\n    .max(64)\n    .required('Required'),\n});\n\nconst initialValuesForm = {\n  name: '',\n  email: '',\n  password: '',\n};\n\nconst RegistrationForm = () => {\n  const [showPassword, setShowPassword] = useState(false);\n\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const isLogIn = useSelector(getIsLoggin);\n\n  useEffect(() => {\n    if (isLogIn) {\n      navigate('/home', { replace: true });\n    }\n  }, [isLogIn, navigate]);\n\n  const handleSubmit = async (values, { resetForm }) => {\n    console.log(values);\n    await dispatch(register(values));\n    resetForm();\n  };\n\n  const handleTogglePassword = () => {\n    setShowPassword(prevShowPassword => !prevShowPassword);\n  };\n\n  return (\n    <Formik\n      initialValues={initialValuesForm}\n      onSubmit={handleSubmit}\n      validationSchema={schema}\n      validateOnBlur\n    >\n      {({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isValid,\n        dirty,\n      }) => (\n        <Form className={css.form}>\n          <div className={css.form__field}>\n            <Field\n              autoComplete=\"name\"\n              placeholder=\"Enter your name\"\n              type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.name}\n              className={css.form__input}\n            />\n            {touched.name && errors.name && (\n              <p className={css.form__error}>{errors.name}</p>\n            )}\n          </div>\n\n          <div className={css.form__field}>\n            <Field\n              autoComplete=\"email\"\n              placeholder=\"Enter your email\"\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.email}\n              className={css.form__input}\n            />\n            {touched.email && errors.email && (\n              <p className={css.form__error}>{errors.email}</p>\n            )}\n          </div>\n\n          <div className={css.form__password}>\n            <Field\n              autoComplete=\"password\"\n              placeholder=\"Enter your password\"\n              type={!showPassword ? 'password' : 'text'}\n              name=\"password\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              values={values.password}\n              className={css.form__input}\n            />\n            {touched.password && errors.password && (\n              <p className={css.form__error}>{errors.password}</p>\n            )}\n            <svg\n              width={18}\n              height={18}\n              className={css.svg}\n              onClick={handleTogglePassword}\n            >\n              <use href={svgSprite + '#icon-eye'} />\n            </svg>\n          </div>\n\n          <button type=\"submit\" className={css.button}>\n            Register Now\n          </button>\n        </Form>\n      )}\n    </Formik>\n  );\n};\n\nexport default RegistrationForm;\n"],"names":["schema","object","name","string","trim","matches","min","max","required","email","password","initialValuesForm","useState","showPassword","setShowPassword","navigate","useNavigate","dispatch","useDispatch","isLogIn","useSelector","getIsLoggin","useEffect","replace","handleSubmit","values","resetForm","console","log","register","handleTogglePassword","prevShowPassword","initialValues","onSubmit","validationSchema","validateOnBlur","errors","touched","handleChange","handleBlur","isValid","dirty","className","css","autoComplete","placeholder","type","onChange","onBlur","width","height","onClick","href","svgSprite"],"sourceRoot":""}